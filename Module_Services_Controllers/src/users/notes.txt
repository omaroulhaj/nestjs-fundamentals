DI => Dependency Injection Design Pattern
=>UserController=>UserServices,AuthService,*****=>UserRepository,AuthRepository

==>Instance of UserController 
const UserController=new UserController(new UserServices(new UserRepository(),new AuthService(new AuthRepository())))

DI it comes to resolve this problem above
classيفصل بين الانشاء والاستخدام لل 

== Ioc => Inversion of Control means => we don't create instance of class manually , we let the framework create it for us.
DI and Ioc =combine manage dependencies for us 
*******************************************************************************************

==> DI container :
* Mange all dependencies
Example : 
UserServices=>UserRepository , 
UserController=>UserServices ,
AuthService=>AuthRepository 
* Intance of UserController (Instance of DI ) retrun --> DI container instanceمخزن ل 
